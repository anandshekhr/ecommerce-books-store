pipeline {
    agent any

    parameters {
        choice(
            name: 'ENVIRONMENT',
            choices: ['Dev', 'Int','Uat', 'Prod'],
            description: 'Select the environment to build for'
        )

        choice(
            name: 'BUILD_ACTION',
            choices: ['Build Only', 'Build and Deploy'],
            description: 'Choose whether to only build or also deploy'
        )
    }

    environment {
        GIT_REPO = "https://github.com/anandshekhr/ecommerce-books-store.git"
        COMPOSE_FILE = "deploy/docker-compose.yml"
        IMAGE_NAME="bookstore"
        TAG = "v${BUILD_NUMBER}"
        VERSION_PREFIX = '1.0'
        CUSTOM_VERSION = ''
    }

    stages {
        stage('Checkout Code') {
            steps {
                echo "üì• Cloning code from repository..."
                git url: "${GIT_REPO}"
            }
        }
        stage('Preparing') {
            steps{
                script {
                    // Step 1: Set version prefix based on environment
                    def prefix = (params.ENVIRONMENT in ['Dev', 'Int']) ? '0.0' : '1.0'
                    env.VERSION_PREFIX = prefix
                    echo "üìå Version prefix set to: ${env.VERSION_PREFIX}"

                    // Step 2: Get previous build number and bump patch
                    def previousBuild = currentBuild.previousBuild
                    def lastVersion = "${env.VERSION_PREFIX}.0"

                    if (previousBuild != null) {
                        def previousDesc = previousBuild.getDescription()
                        if (previousDesc?.startsWith('v')) {
                            lastVersion = previousDesc.replace('v', '')
                        }
                    }

                    def (major, minor, patch) = lastVersion.tokenize('.').collect { it as int }

                    // Just increment patch here
                    patch += 1

                    CUSTOM_VERSION = "${major}.${minor}.${patch}"
                    currentBuild.displayName = "v${CUSTOM_VERSION}"
                    currentBuild.description = "v${CUSTOM_VERSION}"

                    echo "üî¢ Computed Version: v${CUSTOM_VERSION}"
                }

            
            }
        }

        // stage('Install Docker & Build') {
        //     steps {
        //         sh 'chmod +x deploy/shell/setup-and-build.sh'
        //         sh 'deploy/shell/setup-and-build.sh'
        //     }
        // }

        stage('Build') {
            steps {
                echo "üîß Building..."
                sh '''
                    export PATH=/usr/local/bin:$PATH
                    docker --version
                    docker-compose -f ${COMPOSE_FILE} build --build-arg BUILD_NUMBER=${TAG}
                    '''
            }
        }

        // stage('(Optional) Save Image') {
        //     when {
        //         expression { fileExists("deploy/image/Dockerfile") }
        //     }
        //     steps {
        //         echo "üíæ Saving image to archive (optional)"
        //         sh "docker save bookstore:latest -o django_app.tar"
        //     }
        // }
        stage('Post Check') {
            steps {
                echo """Completing..."""
            }
        }
    }

    post {
        success {
            echo "‚úÖ Docker Compose build succeeded"
        }
        failure {
            echo "‚ùå Docker Compose build failed"
        }
    }
}
